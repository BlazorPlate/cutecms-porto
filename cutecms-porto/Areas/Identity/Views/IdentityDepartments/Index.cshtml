@model cutecms_porto.Areas.Identity.Models.DepartmentsViewModel
@using cutecms_porto.Areas.Identity.Models.DBModel
@using cutecms_porto.Areas.CMS.Models.DBModel
@using System.Threading
@{
    ViewBag.MainTitle = Resources.Resources.Departments;
    ViewBag.Title = Resources.Resources.Index;
}
<head>
    <style>
        .glyphicon-folder-open {
            margin-right: 10px !important;
        }

        .glyphicon-folder-close {
            margin-right: 10px !important;
        }

        .glyphicon-user {
            margin-right: 10px !important;
        }

        ul {
            margin-bottom: -8px !important;
        }

        .wheat-color {
            background-color: wheat;
        }
    </style>
</head>
@if (Model != null && Model.Departments.Count() > 0)
{
    <div class="tree well">
        <a class="glyphicon glyphicon-plus" href="@Url.Action("Create", "IdentityDepartments")"></a>
        <h5>@Resources.Resources.AwaitingTranslation</h5>
        <ul>
            @GetDepartments(Model.Departments, null)
        </ul>
        @helper GetDepartments(IEnumerable<IdentityDepartment> departments, int? parentId)
        {
IdentityEntities db = new IdentityEntities();
var departmentLists = departments.OrderBy(d => d.Ordinal);
foreach (var item in departmentLists)
{
        <li>
            <span><i class="glyphicon glyphicon-folder-open"></i>@item.Code</span>
            <span>@item.Ordinal</span>
            <a class="glyphicon glyphicon-edit" href="@Url.Action("Edit", "IdentityDepartments", new { id = item.Id})"></a>
            <a class="glyphicon glyphicon-list" href="@Url.Action("Details", "IdentityDepartments", new { id = item.Id})"></a>
            <a class="glyphicon glyphicon-globe" href="@Url.Action("Index", "IdentityDepartmentTerms",new { id = item.Id })"></a>
            <a class="glyphicon glyphicon-remove" href="@Url.Action("Delete", "IdentityDepartments",new { id = item.Id })"></a>
        </li>
}
}
    </div>
}
<div class="tree well">
    <a class="glyphicon glyphicon-plus" href="@Url.Action("Create", "IdentityDepartments")"></a>
    @if (Model != null && Model.DepartmentTerms.Count() > 0)
    {
        <ul>
            @GetDepartmentWithTerms(Model.DepartmentTerms, null)
        </ul>
    }
    @helper GetDepartmentWithTerms(IEnumerable<IdentityDepartmentTerm> departments, int? parentId)
    {
IdentityEntities db = new IdentityEntities();
IEnumerable<IdentityDepartmentTerm> departmentLists = departments.Where(d => d.Department.ParentId.Equals(parentId) && d.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).OrderBy(d => d.Department.Ordinal).ToList();
foreach (var item in departmentLists)
{
        <li>
            @{
                var submenu = departments.Where(d => d.Department.ParentId.Equals(parentId)).Count();
            }

            <span><i class="glyphicon glyphicon-folder-open"></i>@item.Department.DepartmentTerms.Where(d => d.DepartmentId == item.DepartmentId && d.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault().Value</span>
            <span>@item.Department.Ordinal</span>
            <a class="fa fa-users" href="@Url.Action("Index", "EmpInDepts", new { id = item.DepartmentId }, null)"></a>
            <a clas></a>
            <a class="glyphicon glyphicon-edit" href="@Url.Action("Edit", "IdentityDepartments", new { id = item.DepartmentId })"></a>
            <a clas></a>
            <a class="glyphicon glyphicon-globe" href="@Url.Action("Index", "IdentityDepartmentTerms",new { id = item.DepartmentId })"></a>
            <a class="glyphicon glyphicon-remove" href="@Url.Action("Delete", "IdentityDepartments",new { id = item.DepartmentId })"></a>
            @if (item.Department.EmpInDepts != null)
            {
                <ul>
                    @if (item.Department.Employee != null && db.Employees.Where(e => e.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name) && e.TranslationId == item.Department.ManagerId).FirstOrDefault() != null)
                    {
                        string personalTitle = item.Department.Employee.PersonalTitle.PersonalTitleTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? item.Department.Employee.PersonalTitle.Code;
                        Employee employee = db.Employees.Where(e => e.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name) && e.TranslationId == item.Department.ManagerId).FirstOrDefault();
                        <li><span class="wheat-color"><i class="glyphicon glyphicon-user"></i><a href="@Url.Action("Details", "Employees",new { id = employee.Id })">@personalTitle  @employee.FullName</a></span></li>
                    }
                    @foreach (var empInDept in item.Department.EmpInDepts.Where(e => e.Employee.TranslationId != e.Department.ManagerId).OrderBy(e => e.Employee.Ordinal))
                    {
                        if (db.Employees.Where(e => e.TranslationId == empInDept.EmpId && e.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault() != null)
                        {
                            string personalTitle = empInDept.Employee.PersonalTitle.PersonalTitleTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? empInDept.Employee.PersonalTitle.Code;
                            Employee employee = db.Employees.Where(e => e.TranslationId == empInDept.EmpId && e.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault();
                            <li><span><i class="glyphicon glyphicon-user"></i><a href="@Url.Action("Details", "Employees",new { id = employee.Id })">@personalTitle @employee.FullName</a></span></li>
                        }
                    }
                </ul>
            }
            @if (submenu > 0)
            {
                <ul>
                    @GetDepartmentWithTerms(departments, item.DepartmentId)
                    @* Recursive  Call for Populate Sub items here*@
                </ul>
            }
        </li>
                }
}
</div>
