@model IEnumerable<IdentityDepartment>
@using cutecms_porto.Areas.Identity.Models.DBModel
@using System.Threading
@using PagedList.Mvc;
@using PagedList;
@{
    ViewBag.Title = Resources.Resources.DepartmentStaffList;
    IdentityEntities db = new IdentityEntities();
}
@section PageHeader
{
    <section class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <h1>@ViewBag.Title</h1>
                </div>
            </div>
        </div>
    </section>
}
<section>
    <div class="container">
        @foreach (var dept in Model)
        {
            if (dept.ParentId != null)
            {
                string parentDepartmentName = dept.Department1?.DepartmentTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? dept.Department1?.Code;
                string departmentName = dept.DepartmentTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? dept.Code;
                <section class="section section-text-light section-background section-center section-overlay-opacity section-overlay-opacity-scale-2" style="background-image: url(/assets/porto/img/custom-team-header-bg.jpg);">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h4 class="mb-none">@parentDepartmentName</h4>
                                <h5>@departmentName</h5>
                            </div>
                        </div>
                    </div>
                </section>
            }
            else
            {
                string departmentName = dept.DepartmentTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? dept.Code;
                <section class="section section-text-light section-background section-center section-overlay-opacity section-overlay-opacity-scale-2" style="background-image: url(/assets/porto/img/custom-team-header-bg.jpg);">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h4 class="mb-none">@departmentName</h4>
                            </div>
                        </div>
                    </div>
                </section>
            }
            if (dept.Employee != null)//If the department has manager
            {
                string personalTitle = dept.Employee.PersonalTitle.PersonalTitleTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? dept.Employee.PersonalTitle.Code;
                var manager = db.Employees.Where(e => e.Language.CultureName.Equals(Thread.CurrentThread.CurrentCulture.Name) && e.TranslationId == dept.ManagerId).FirstOrDefault();
                <div class="row">
                    <ul class="team-list sort-destination">
                        @if (manager != null)
                    {
                            <li class="col-md-3 col-sm-6 isotope-item">
                                <span class="thumb-info thumb-info-hide-wrapper-bg mb-xlg">
                                    <span class="thumb-info-wrapper">
                                        <a href="@Url.Action("MemberProfile", new { id = manager.Id })">
                                            <img alt="@manager.PersonalPhotoName" src="@(!File.Exists(Server.MapPath(manager.PersonalPhotoPath)) ? "/assets/admin/plugins/images/users/user-icon.png" : @manager.PersonalPhotoPath)">
                                            <span class="thumb-info-title">
                                                <span class="thumb-info-inner">@personalTitle @manager.FullName</span>
                                                @foreach (var empInDept in dept.Employee.EmpInDepts.OrderBy(e => e.Ordinal))
                                                {
                                                    string occupation = empInDept.Occupation.OccupationTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? empInDept.Occupation.Code;
                                                    string department = empInDept.Department.DepartmentTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault()?.Value ?? empInDept.Department.Code;
                                                    <span class="thumb-info-type">@occupation &#64; @department</span>
                                                }
                                            </span>
                                        </a>
                                    </span>
                                    <span class="thumb-info-caption">
                                        <span class="thumb-info-caption-text text-justify">
                                            @Html.Raw(manager.Biography.StripHtml().Chop(100))
                                            <a class="btn btn-xs" href="@Url.Action("MemberProfile", new { id = manager.Id })">@Resources.Resources.ReadMore</a>
                                        </span>
                                        <span class="thumb-info-social-icons center">
                                            @if (!string.IsNullOrEmpty(manager.FacebookUrl))
                                            {
                                                <a target="_blank" href="@manager.FacebookUrl"><i class="fa fa-facebook"></i><span>Facebook</span></a>
                                            }
                                            @if (!string.IsNullOrEmpty(manager.TwitterUrl))
                                            {
                                                <a target="_blank" href="@manager.TwitterUrl"><i class="fa fa-twitter"></i><span>Twitter</span></a>
                                            }
                                            @if (!string.IsNullOrEmpty(manager.LinkedInUrl))
                                            {
                                                <a target="_blank" href="@manager.LinkedInUrl"><i class="fa fa-linkedin"></i><span>Linkedin</span></a>
                                            }
                                            @if (!string.IsNullOrEmpty(manager.GooglePlusUrl))
                                            {
                                                <a target="_blank" href="@manager.GooglePlusUrl"><i class="fa fa-google-plus"></i><span>Google Plus</span></a>
                                            }
                                            @if (!string.IsNullOrEmpty(manager.YouTubeUrl))
                                            {
                                                <a target="_blank" href="@manager.YouTubeUrl"><i class="fa fa-youtube"></i><span>YouTube</span></a>
                                            }
                                        </span>
                                    </span>
                                </span>
                            </li>
                        }
                    </ul>
                </div>
                <br />
            }
            <div class="row">
                @{
                    var empInDepts = dept.EmpInDepts.Where(e => e.Department.ManagerId != e.EmpId).OrderBy(e => e.Employee.Ordinal);
                }
                <ul class="team-list sort-destination">
                    @foreach (var empInDept in empInDepts)
                    {
                        string personalTitle = (empInDept.Employee.PersonalTitle.PersonalTitleTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault() != null) ? empInDept.Employee.PersonalTitle.PersonalTitleTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault().Value : empInDept.Employee.PersonalTitle.Code;
                        var employee = db.Employees.Where(e => e.Language.CultureName.Equals(Thread.CurrentThread.CurrentCulture.Name) && e.TranslationId == empInDept.Employee.TranslationId).FirstOrDefault();
                        if (employee != null)
                        {
                            <li class="col-md-3 col-sm-6 isotope-item">
                                <span class="thumb-info thumb-info-hide-wrapper-bg mb-xlg">
                                    <span class="thumb-info-wrapper">
                                        <a href="@Url.Action("MemberProfile", new { id = empInDept.Employee.Id })">
                                            <img alt="@employee.PersonalPhotoName" src="@(!File.Exists(Server.MapPath(employee.PersonalPhotoPath)) ? "/assets/admin/plugins/images/users/user-icon.png" : @employee.PersonalPhotoPath)">
                                            <span class="thumb-info-title">
                                                <span class="thumb-info-inner">@personalTitle @employee.FullName</span>
                                                @foreach (var empInDept1 in empInDept.Employee.EmpInDepts.OrderBy(e => e.Ordinal))
                                                {
                                                    string occupation = (empInDept1.Occupation.OccupationTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault() != null) ? empInDept1.Occupation.OccupationTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault().Value : empInDept1.Occupation.Code;
                                                    string department = (empInDept1.Department.DepartmentTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault() != null) ? empInDept1.Department.DepartmentTerms.Where(p => p.Language.CultureName.Trim().Equals(Thread.CurrentThread.CurrentCulture.Name)).FirstOrDefault().Value : empInDept1.Department.Code;
                                                    <span class="thumb-info-type">@occupation &#64; @department</span>
                                                }
                                            </span>
                                        </a>
                                    </span>
                                    <span class="thumb-info-caption">
                                        <span class="thumb-info-caption-text text-justify">
                                            @Html.Raw(empInDept.Employee.Biography.StripHtml().Chop(100))
                                            <a class="btn btn-xs" href="@Url.Action("MemberProfile", new { id = empInDept.Employee.Id })">@Resources.Resources.ReadMore</a>
                                        </span>
                                        <span class="thumb-info-social-icons center">
                                            @if (!string.IsNullOrEmpty(@empInDept.Employee.FacebookUrl))
                                            {
                                                <a target="_blank" href="@empInDept.Employee.FacebookUrl"><i class="fa fa-facebook"></i><span>Facebook</span></a>
                                            }

                                            @if (!string.IsNullOrEmpty(empInDept.Employee.TwitterUrl))
                                            {
                                                <a target="_blank" href="@empInDept.Employee.TwitterUrl"><i class="fa fa-twitter"></i><span>Twitter</span></a>
                                            }
                                            @if (!string.IsNullOrEmpty(@empInDept.Employee.LinkedInUrl))
                                            {
                                                <a target="_blank" href="@empInDept.Employee.LinkedInUrl"><i class="fa fa-linkedin"></i><span>Linkedin</span></a>
                                            }
                                            @if (!string.IsNullOrEmpty(@empInDept.Employee.GooglePlusUrl))
                                            {
                                                <a target="_blank" href="@empInDept.Employee.GooglePlusUrl"><i class="fa fa-google-plus"></i><span>Google Plus</span></a>
                                            }
                                            @if (!string.IsNullOrEmpty(@empInDept.Employee.YouTubeUrl))
                                            {
                                                <a target="_blank" href="@empInDept.Employee.YouTubeUrl"><i class="fa fa-youtube"></i><span>YouTube</span></a>
                                            }
                                        </span>
                                    </span>
                                </span>
                            </li>
                        }
                    }
                </ul>
            </div>
            <hr />
                    }
        @Html.PagedListPager((IPagedList)Model, page => Url.Action("EmpsInDept", new { page }))
        <div>
            <a class="text-blue" href=@Url.Action("Index")><i class="glyphicon glyphicon-menu-left margin-right-10 size-16"></i>@Resources.Resources.Back</a>
        </div>
    </div>
</section>
@functions
{
    public List<IdentityDepartment> GetChildren(IdentityDepartment parentNode)
    {
        List<IdentityDepartment> nodes = new List<IdentityDepartment>();
        if (parentNode.EmpInDepts.Count != 0 || parentNode.Employee != null)
            nodes.Add(parentNode);
        GetAllChildren(parentNode, nodes);
        return nodes;
    }
    public void GetAllChildren(IdentityDepartment parentNode, List<IdentityDepartment> nodes)
    {
        if (parentNode.Departments1 != null)
        {
            foreach (var childNode in parentNode.Departments1.OrderBy(d => d.Ordinal))
            {
                if (childNode.EmpInDepts.Count != 0 || childNode.Employee != null)
                    nodes.Add(childNode);
                GetAllChildren(childNode, nodes);
            }
        }
    }
}